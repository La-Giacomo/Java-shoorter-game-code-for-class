`import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.*;

public class ShooterGame extends JFrame implements ActionListener, KeyListener {
    private static final int SCREEN_WIDTH = 800;
    private static final int SCREEN_HEIGHT = 600;
    private static final int PLAYER_WIDTH = 50;
    private static final int PLAYER_HEIGHT = 50;
    private static final int BULLET_WIDTH = 5;
    private static final int BULLET_HEIGHT = 10;
    private static final int ENEMY_WIDTH = 50;
    private static final int ENEMY_HEIGHT = 50;
    private static final int POWERUP_WIDTH = 25;
    private static final int POWERUP_HEIGHT = 25;
    private static final int POWERUP_DURATION = 5000;
    private static final int PLAYER_SPEED = 10;
    private static final int BULLET_SPEED = 10;
    private static final int ENEMY_SPEED = 5;
    private static final int POWERUP_SPEED = 5;
    private static final int ENEMY_SPAWN_INTERVAL = 2000;
    private static final int POWERUP_SPAWN_INTERVAL = 10000;
    private static final int MAX_LEVEL = 5;
    private static final String SCORE_FILE = "highscores.txt";

    private int score;
    private int level;
    private int playerX;
    private int playerY;
    private int bulletCooldown;
    private int enemySpawnCooldown;
    private int powerupSpawnCooldown;
    private boolean gameOver;
    private boolean gamePaused;
    private boolean shooting;
    private boolean upPressed;
    private boolean downPressed;
    private boolean leftPressed;
    private boolean rightPressed;
    private Image playerImage;
    private Image bulletImage;
    private Image enemyImage;
    private Image powerupImage;
    private Random random;
    private Timer timer;
    private ArrayList<Point> bullets;
    private ArrayList<Point> enemies;
    private ArrayList<Point> powerups;
    private ArrayList<Integer> highScores;

    public ShooterGame() {
        setTitle("Shooter Game");
        setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
        setResizable(false);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
        addKeyListener(this);

        random = new Random();
        timer = new Timer(1000 / 60, this);
        timer.start();

        try {
            playerImage = ImageIO.read(new File("player.png"));
            bulletImage = ImageIO.read(new File("bullet.png"));
            enemyImage = ImageIO.read(new File("enemy.png"));
            powerupImage = ImageIO.read(new File("powerup.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        bullets = new ArrayList<>();
        enemies = new ArrayList<>();
        powerups = new ArrayList<>();
        highScores = new ArrayList<>();
        loadHighScores();
        newGame();
    }

    private void newGame() {
        score = 0;
        level = 1;
        playerX = SCREEN_WIDTH / 2 - PLAYER_WIDTH / 2;
        playerY = SCREEN
_HEIGHT - PLAYER_HEIGHT * 2;
bulletCooldown = 0;
enemySpawnCooldown = ENEMY_SPAWN_INTERVAL;
powerupSpawnCooldown = POWERUP_SPAWN_INTERVAL;
gameOver = false;
gamePaused = false;
shooting = false;
upPressed = false;
downPressed = false;
leftPressed = false;
rightPressed = false;
bullets.clear();
enemies.clear();
powerups.clear();
spawnEnemies();
}

private void spawnEnemies() {
    for (int i = 0; i < level * 5; i++) {
        int x = random.nextInt(SCREEN_WIDTH - ENEMY_WIDTH);
        int y = -random.nextInt(SCREEN_HEIGHT);
        enemies.add(new Point(x, y));
    }
}

private void spawnPowerup() {
    int x = random.nextInt(SCREEN_WIDTH - POWERUP_WIDTH);
    int y = -random.nextInt(SCREEN_HEIGHT);
    powerups.add(new Point(x, y));
}

private void update() {
    if (!gameOver && !gamePaused) {
        // Move player
        if (upPressed && playerY > 0) {
            playerY -= PLAYER_SPEED;
        }
        if (downPressed && playerY < SCREEN_HEIGHT - PLAYER_HEIGHT) {
            playerY += PLAYER_SPEED;
        }
        if (leftPressed && playerX > 0) {
            playerX -= PLAYER_SPEED;
        }
        if (rightPressed && playerX < SCREEN_WIDTH - PLAYER_WIDTH) {
            playerX += PLAYER_SPEED;
        }

        // Shoot bullet
        if (shooting && bulletCooldown == 0) {
            int x = playerX + PLAYER_WIDTH / 2 - BULLET_WIDTH / 2;
            int y = playerY - BULLET_HEIGHT;
            bullets.add(new Point(x, y));
            bulletCooldown = 10;
        }

        // Move bullets
        for (int i = 0; i < bullets.size(); i++) {
            Point bullet = bullets.get(i);
            bullet.y -= BULLET_SPEED;
            if (bullet.y < -BULLET_HEIGHT) {
                bullets.remove(i);
                i--;
            }
        }

        // Spawn enemies
        enemySpawnCooldown--;
        if (enemySpawnCooldown == 0) {
            spawnEnemies();
            enemySpawnCooldown = ENEMY_SPAWN_INTERVAL;
        }

        // Move enemies
        for (int i = 0; i < enemies.size(); i++) {
            Point enemy = enemies.get(i);
            enemy.y += ENEMY_SPEED;
            if (enemy.y > SCREEN_HEIGHT) {
                enemies.remove(i);
                i--;
            } else if (enemy.y + ENEMY_HEIGHT > playerY && enemy.x + ENEMY_WIDTH > playerX && enemy.x < playerX + PLAYER_WIDTH) {
                gameOver = true;
            }
        }

        // Spawn powerup
        powerupSpawnCooldown--;
        if (powerupSpawnCooldown == 0) {
            spawnPowerup();
            powerupSpawnCooldown = POWERUP_SPAWN_INTERVAL;
        }

        // Move powerups
        for (int i = 0; i < powerups.size(); i++) {
            Point powerup = powerups.get(i);
            powerup.y += POWERUP_SPEED;
            if (powerup.y > SCREEN_HEIGHT) {
                powerups.remove(i);
                i--;
            } else if (powerup.y + POWERUP_HEIGHT > playerY && powerup.x + POWERUP_WIDTH > playerX && powerup.x < playerX + PLAYER_WIDTH) {
                powerups.remove(i);
                i--;
                newPowerup();
            }
        }

        // Update bullet cooldown
        if (bulletCooldown >
        {
bulletCooldownâ€“;
}

     // Update powerup cooldowns
     if (powerupCooldown > 0) {
         powerupCooldown--;
     } else {
         playerSpeedBoost = 0;
         playerInvincibility = false;
     }

     // Update score and level
     score++;
     if (score % LEVEL_UP_INTERVAL == 0) {
         level++;
     }
 }
}

private void newPowerup() {
int type = random.nextInt(2);
if (type == 0) {
playerSpeedBoost = 1;
} else if (type == 1) {
powerupCooldown = POWERUP_DURATION;
playerInvincibility = true;
}
}

private void draw() {
BufferStrategy buffer = getBufferStrategy();
if (buffer == null) {
createBufferStrategy(3);
return;
}

 Graphics g = buffer.getDrawGraphics();

 // Clear screen
 g.setColor(Color.BLACK);
 g.fillRect(0, 0, getWidth(), getHeight());

 // Draw player
 g.setColor(Color.WHITE);
 g.fillRect(playerX, playerY, PLAYER_WIDTH, PLAYER_HEIGHT);

 // Draw bullets
 g.setColor(Color.YELLOW);
 for (Point bullet : bullets) {
     g.fillRect(bullet.x, bullet.y, BULLET_WIDTH, BULLET_HEIGHT);
 }

 // Draw enemies
 g.setColor(Color.RED);
 for (Point enemy : enemies) {
     g.fillRect(enemy.x, enemy.y, ENEMY_WIDTH, ENEMY_HEIGHT);
 }

 // Draw powerups
 g.setColor(Color.GREEN);
 for (Point powerup : powerups) {
     g.fillRect(powerup.x, powerup.y, POWERUP_WIDTH, POWERUP_HEIGHT);
 }

 // Draw score and level
 g.setColor(Color.WHITE);
 g.setFont(new Font("Arial", Font.PLAIN, 20));
 g.drawString("Score: " + score, 10, 25);
 g.drawString("Level: " + level, 10, 50);

 // Draw game over text
 if (gameOver) {
     g.setColor(Color.RED);
     g.setFont(new Font("Arial", Font.BOLD, 50));
     g.drawString("GAME OVER", SCREEN_WIDTH / 2 - 150, SCREEN_HEIGHT / 2);
 }

 // Draw pause text
 if (gamePaused) {
     g.setColor(Color.WHITE);
     g.setFont(new Font("Arial", Font.BOLD, 50));
     g.drawString("PAUSED", SCREEN_WIDTH / 2 - 100, SCREEN_HEIGHT / 2);
 }

 g.dispose();
 buffer.show();
}

private class KeyHandler extends KeyAdapter {
@Override
public void keyPressed(KeyEvent e) {
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
upPressed = true;
break;
case KeyEvent.VK_DOWN:
downPressed = true;
break;
case KeyEvent.VK_LEFT:
leftPressed = true;
break;
case KeyEvent.VK_RIGHT:
rightPressed = true;
break;
case KeyEvent.VK_SPACE:
shooting = true;
break;
case KeyEvent.VK_P:
gamePaused = !gamePaused;
break;
case KeyEvent.VK_ESCAPE:
System.exit(0);
break;
}
}

 @Override
 public void keyReleased(KeyEvent e) {
     switch (e.getKeyCode()) {
         case KeyEvent.VK_UP:
             upPressed = false;
             break;
         case KeyEvent.VK_DOWN:
             downPressed = false;
             break;
         case KeyEvent.VK_LEFT:
             leftPressed = false;
             break;
         case KeyEvent.VK_RIGHT:
             right
Pressed = false;
break;
case KeyEvent.VK_SPACE:
shooting = false;
break;
}
}
}

public static void main(String[] args) {
    Game game = new Game();
    game.run();
}
}

